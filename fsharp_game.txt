TYPES
Player -> creatable user with stats
    - Name
    - Inventory
	- SPECIAL (max 10 in each stat) -> influences events (6 INT to hack a user terminal, 8 INT to bypass file encryption,
								3 CHARISMA to persuade the robot bouncer)

Ship -> abstract item, contains rooms

room: screen (the room the user is currently in) ->
	- screenName
	- screenConnections : screen []
	- events : event [] (randomised list perhaps - too complex for now)

event : event (an interactable user event) ->
	- title
	- path	-> ID : num + option numeric (1, 2a, 2b)
		-> text
		-> result (leads to new path or ends event)
	- current_path (to come back later if need be)
	- finished : bool (if the user has finished the event)
	
gameState
    - player
    - currentScreen
    - eventData : event [] -> information stored on interacted events
                           -> on screen change, load event to screen on match


FUNCS
moveScreenFunc newScreen =
    gameState.eventData.TryFind each event in screen.events []
    update gameState.currentScreen newScreen
    
onEventComplete event =
    update event in gameState.eventData
    update event in screen.events []